/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_DEV_RPC_ELEFACE_H_
#define JSONRPC_CPP_STUB_DEV_RPC_ELEFACE_H_

#include "ModularServer.h"

namespace dev {
    namespace rpc {
        class EleFace : public ServerInterface<EleFace>
        {
            public:
                EleFace()
                {
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_protocolVersion", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::EleFace::ele_protocolVersionI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_hashrate", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::EleFace::ele_hashrateI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_coinbase", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::EleFace::ele_coinbaseI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_mining", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN,  NULL), &dev::rpc::EleFace::ele_miningI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_gasPrice", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::EleFace::ele_gasPriceI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_accounts", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY,  NULL), &dev::rpc::EleFace::ele_accountsI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_blockNumber", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::EleFace::ele_blockNumberI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getBalance", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getBalanceI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getStorageAt", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING,"param3",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getStorageAtI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getTransactionCount", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getTransactionCountI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_pendingTransactions", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::EleFace::ele_pendingTransactionsI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getBlockTransactionCountByHash", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getBlockTransactionCountByHashI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getBlockTransactionCountByNumber", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getBlockTransactionCountByNumberI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getUncleCountByBlockHash", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getUncleCountByBlockHashI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getUncleCountByBlockNumber", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getUncleCountByBlockNumberI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getCode", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getCodeI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_sendTransaction", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::EleFace::ele_sendTransactionI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_call", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_callI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_flush", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN,  NULL), &dev::rpc::EleFace::ele_flushI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getBlockByHash", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_BOOLEAN, NULL), &dev::rpc::EleFace::ele_getBlockByHashI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getBlockByNumber", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_BOOLEAN, NULL), &dev::rpc::EleFace::ele_getBlockByNumberI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getTransactionByHash", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getTransactionByHashI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getTransactionByBlockHashAndIndex", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getTransactionByBlockHashAndIndexI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getTransactionByBlockNumberAndIndex", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getTransactionByBlockNumberAndIndexI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getTransactionReceipt", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getTransactionReceiptI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getUncleByBlockHashAndIndex", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getUncleByBlockHashAndIndexI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getUncleByBlockNumberAndIndex", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getUncleByBlockNumberAndIndexI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_newFilter", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::EleFace::ele_newFilterI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_newFilterEx", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::EleFace::ele_newFilterExI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_newBlockFilter", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::EleFace::ele_newBlockFilterI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_newPendingTransactionFilter", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING,  NULL), &dev::rpc::EleFace::ele_newPendingTransactionFilterI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_uninstallFilter", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_uninstallFilterI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getFilterChanges", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getFilterChangesI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getFilterChangesEx", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getFilterChangesExI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getFilterLogs", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getFilterLogsI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getFilterLogsEx", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_getFilterLogsExI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getLogs", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::EleFace::ele_getLogsI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getLogsEx", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::EleFace::ele_getLogsExI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_getWork", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY,  NULL), &dev::rpc::EleFace::ele_getWorkI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_submitWork", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING,"param3",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_submitWorkI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_submitHashrate", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING,"param2",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_submitHashrateI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_register", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_registerI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_unregister", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_unregisterI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_fetchQueuedTransactions", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_ARRAY, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_fetchQueuedTransactionsI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_signTransaction", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::EleFace::ele_signTransactionI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_inspectTransaction", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_inspectTransactionI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_sendRawTransaction", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_sendRawTransactionI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_notePassword", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_BOOLEAN, "param1",jsonrpc::JSON_STRING, NULL), &dev::rpc::EleFace::ele_notePasswordI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_syncing", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT,  NULL), &dev::rpc::EleFace::ele_syncingI);
                    this->bindAndAddMethod(jsonrpc::Procedure("ele_estimateGas", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_STRING, "param1",jsonrpc::JSON_OBJECT, NULL), &dev::rpc::EleFace::ele_estimateGasI);
                }

                inline virtual void ele_protocolVersionI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->ele_protocolVersion();
                }
                inline virtual void ele_hashrateI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->ele_hashrate();
                }
                inline virtual void ele_coinbaseI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->ele_coinbase();
                }
                inline virtual void ele_miningI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->ele_mining();
                }
                inline virtual void ele_gasPriceI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->ele_gasPrice();
                }
                inline virtual void ele_accountsI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->ele_accounts();
                }
                inline virtual void ele_blockNumberI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->ele_blockNumber();
                }
                inline virtual void ele_getBalanceI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getBalance(request[0u].asString(), request[1u].asString());
                }
                inline virtual void ele_getStorageAtI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getStorageAt(request[0u].asString(), request[1u].asString(), request[2u].asString());
                }
                inline virtual void ele_getTransactionCountI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getTransactionCount(request[0u].asString(), request[1u].asString());
                }
                inline virtual void ele_pendingTransactionsI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->ele_pendingTransactions();
                }
                inline virtual void ele_getBlockTransactionCountByHashI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getBlockTransactionCountByHash(request[0u].asString());
                }
                inline virtual void ele_getBlockTransactionCountByNumberI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getBlockTransactionCountByNumber(request[0u].asString());
                }
                inline virtual void ele_getUncleCountByBlockHashI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getUncleCountByBlockHash(request[0u].asString());
                }
                inline virtual void ele_getUncleCountByBlockNumberI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getUncleCountByBlockNumber(request[0u].asString());
                }
                inline virtual void ele_getCodeI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getCode(request[0u].asString(), request[1u].asString());
                }
                inline virtual void ele_sendTransactionI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_sendTransaction(request[0u]);
                }
                inline virtual void ele_callI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_call(request[0u], request[1u].asString());
                }
                inline virtual void ele_flushI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->ele_flush();
                }
                inline virtual void ele_getBlockByHashI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getBlockByHash(request[0u].asString(), request[1u].asBool());
                }
                inline virtual void ele_getBlockByNumberI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getBlockByNumber(request[0u].asString(), request[1u].asBool());
                }
                inline virtual void ele_getTransactionByHashI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getTransactionByHash(request[0u].asString());
                }
                inline virtual void ele_getTransactionByBlockHashAndIndexI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getTransactionByBlockHashAndIndex(request[0u].asString(), request[1u].asString());
                }
                inline virtual void ele_getTransactionByBlockNumberAndIndexI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getTransactionByBlockNumberAndIndex(request[0u].asString(), request[1u].asString());
                }
                inline virtual void ele_getTransactionReceiptI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getTransactionReceipt(request[0u].asString());
                }
                inline virtual void ele_getUncleByBlockHashAndIndexI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getUncleByBlockHashAndIndex(request[0u].asString(), request[1u].asString());
                }
                inline virtual void ele_getUncleByBlockNumberAndIndexI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getUncleByBlockNumberAndIndex(request[0u].asString(), request[1u].asString());
                }
                inline virtual void ele_newFilterI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_newFilter(request[0u]);
                }
                inline virtual void ele_newFilterExI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_newFilterEx(request[0u]);
                }
                inline virtual void ele_newBlockFilterI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->ele_newBlockFilter();
                }
                inline virtual void ele_newPendingTransactionFilterI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->ele_newPendingTransactionFilter();
                }
                inline virtual void ele_uninstallFilterI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_uninstallFilter(request[0u].asString());
                }
                inline virtual void ele_getFilterChangesI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getFilterChanges(request[0u].asString());
                }
                inline virtual void ele_getFilterChangesExI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getFilterChangesEx(request[0u].asString());
                }
                inline virtual void ele_getFilterLogsI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getFilterLogs(request[0u].asString());
                }
                inline virtual void ele_getFilterLogsExI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getFilterLogsEx(request[0u].asString());
                }
                inline virtual void ele_getLogsI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getLogs(request[0u]);
                }
                inline virtual void ele_getLogsExI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_getLogsEx(request[0u]);
                }
                inline virtual void ele_getWorkI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->ele_getWork();
                }
                inline virtual void ele_submitWorkI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_submitWork(request[0u].asString(), request[1u].asString(), request[2u].asString());
                }
                inline virtual void ele_submitHashrateI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_submitHashrate(request[0u].asString(), request[1u].asString());
                }
                inline virtual void ele_registerI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_register(request[0u].asString());
                }
                inline virtual void ele_unregisterI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_unregister(request[0u].asString());
                }
                inline virtual void ele_fetchQueuedTransactionsI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_fetchQueuedTransactions(request[0u].asString());
                }
                inline virtual void ele_signTransactionI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_signTransaction(request[0u]);
                }
                inline virtual void ele_inspectTransactionI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_inspectTransaction(request[0u].asString());
                }
                inline virtual void ele_sendRawTransactionI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_sendRawTransaction(request[0u].asString());
                }
                inline virtual void ele_notePasswordI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_notePassword(request[0u].asString());
                }
                inline virtual void ele_syncingI(const Json::Value &request, Json::Value &response)
                {
                    (void)request;
                    response = this->ele_syncing();
                }
                inline virtual void ele_estimateGasI(const Json::Value &request, Json::Value &response)
                {
                    response = this->ele_estimateGas(request[0u]);
                }
                virtual std::string ele_protocolVersion() = 0;
                virtual std::string ele_hashrate() = 0;
                virtual std::string ele_coinbase() = 0;
                virtual bool ele_mining() = 0;
                virtual std::string ele_gasPrice() = 0;
                virtual Json::Value ele_accounts() = 0;
                virtual std::string ele_blockNumber() = 0;
                virtual std::string ele_getBalance(const std::string& param1, const std::string& param2) = 0;
                virtual std::string ele_getStorageAt(const std::string& param1, const std::string& param2, const std::string& param3) = 0;
                virtual std::string ele_getTransactionCount(const std::string& param1, const std::string& param2) = 0;
                virtual std::string ele_pendingTransactions() = 0;
                virtual Json::Value ele_getBlockTransactionCountByHash(const std::string& param1) = 0;
                virtual Json::Value ele_getBlockTransactionCountByNumber(const std::string& param1) = 0;
                virtual Json::Value ele_getUncleCountByBlockHash(const std::string& param1) = 0;
                virtual Json::Value ele_getUncleCountByBlockNumber(const std::string& param1) = 0;
                virtual std::string ele_getCode(const std::string& param1, const std::string& param2) = 0;
                virtual std::string ele_sendTransaction(const Json::Value& param1) = 0;
                virtual std::string ele_call(const Json::Value& param1, const std::string& param2) = 0;
                virtual bool ele_flush() = 0;
                virtual Json::Value ele_getBlockByHash(const std::string& param1, bool param2) = 0;
                virtual Json::Value ele_getBlockByNumber(const std::string& param1, bool param2) = 0;
                virtual Json::Value ele_getTransactionByHash(const std::string& param1) = 0;
                virtual Json::Value ele_getTransactionByBlockHashAndIndex(const std::string& param1, const std::string& param2) = 0;
                virtual Json::Value ele_getTransactionByBlockNumberAndIndex(const std::string& param1, const std::string& param2) = 0;
                virtual Json::Value ele_getTransactionReceipt(const std::string& param1) = 0;
                virtual Json::Value ele_getUncleByBlockHashAndIndex(const std::string& param1, const std::string& param2) = 0;
                virtual Json::Value ele_getUncleByBlockNumberAndIndex(const std::string& param1, const std::string& param2) = 0;
                virtual std::string ele_newFilter(const Json::Value& param1) = 0;
                virtual std::string ele_newFilterEx(const Json::Value& param1) = 0;
                virtual std::string ele_newBlockFilter() = 0;
                virtual std::string ele_newPendingTransactionFilter() = 0;
                virtual bool ele_uninstallFilter(const std::string& param1) = 0;
                virtual Json::Value ele_getFilterChanges(const std::string& param1) = 0;
                virtual Json::Value ele_getFilterChangesEx(const std::string& param1) = 0;
                virtual Json::Value ele_getFilterLogs(const std::string& param1) = 0;
                virtual Json::Value ele_getFilterLogsEx(const std::string& param1) = 0;
                virtual Json::Value ele_getLogs(const Json::Value& param1) = 0;
                virtual Json::Value ele_getLogsEx(const Json::Value& param1) = 0;
                virtual Json::Value ele_getWork() = 0;
                virtual bool ele_submitWork(const std::string& param1, const std::string& param2, const std::string& param3) = 0;
                virtual bool ele_submitHashrate(const std::string& param1, const std::string& param2) = 0;
                virtual std::string ele_register(const std::string& param1) = 0;
                virtual bool ele_unregister(const std::string& param1) = 0;
                virtual Json::Value ele_fetchQueuedTransactions(const std::string& param1) = 0;
                virtual std::string ele_signTransaction(const Json::Value& param1) = 0;
                virtual Json::Value ele_inspectTransaction(const std::string& param1) = 0;
                virtual std::string ele_sendRawTransaction(const std::string& param1) = 0;
                virtual bool ele_notePassword(const std::string& param1) = 0;
                virtual Json::Value ele_syncing() = 0;
                virtual std::string ele_estimateGas(const Json::Value& param1) = 0;
        };

    }
}
#endif //JSONRPC_CPP_STUB_DEV_RPC_ELEFACE_H_
